{"version":3,"sources":["../src/index.ts","../src/types.ts","../src/utils.ts","../src/storage.ts","../src/api.ts","../src/hooks.ts"],"sourcesContent":["// Types\nexport type {\n  Todo,\n  CreateTodoInput,\n  UpdateTodoInput,\n  DeleteTodoInput,\n  UploadImageInput,\n  OfflineTodo,\n  TodoStatus,\n  QueuedAction,\n  QueuedActionType,\n} from './types';\n\n// Schemas\nexport {\n  todoSchema,\n  createTodoSchema,\n  updateTodoSchema,\n  deleteTodoSchema,\n  uploadImageSchema,\n  offlineTodoSchema,\n  queuedActionSchema,\n} from './types';\n\n// Utils\nexport {\n  validateFileSize,\n  validateImageType,\n  fileToBase64,\n  generateLocalId,\n  todoToOfflineTodo,\n  createOfflineTodo,\n  STORAGE_KEYS,\n  SYNC_CONFIG,\n} from './utils';\n\n// Storage\nexport { TodoStorage } from './storage';\n\n// API Client\nexport {\n  TodosApi,\n  createTodosApi,\n  createBrowserTodosApi,\n  type TodosApiConfig,\n} from './api';\n\n// React Query Hooks (optional - only if @tanstack/react-query is available)\nexport {\n  createTodosHooks,\n  TODOS_QUERY_KEYS,\n  type UseTodosHooksConfig,\n  type TodosHooks,\n} from './hooks';","import { z } from 'zod';\n\n// Base todo schema matching the database schema\nexport const todoSchema = z.object({\n  id: z.number(),\n  text: z.string(),\n  completed: z.boolean(),\n  imageUrl: z.string().nullable(),\n});\n\nexport type Todo = z.infer<typeof todoSchema>;\n\n// Input schemas for API operations\nexport const createTodoSchema = z.object({\n  text: z.string().min(1),\n  imageUrl: z.string().optional(),\n});\n\nexport const updateTodoSchema = z.object({\n  id: z.number(),\n  completed: z.boolean(),\n});\n\nexport const deleteTodoSchema = z.object({\n  id: z.number(),\n});\n\nexport const uploadImageSchema = z.object({\n  todoId: z.number(),\n  filename: z.string(),\n  contentType: z.string(),\n  fileData: z.string(), // Base64 encoded file data\n});\n\nexport type CreateTodoInput = z.infer<typeof createTodoSchema>;\nexport type UpdateTodoInput = z.infer<typeof updateTodoSchema>;\nexport type DeleteTodoInput = z.infer<typeof deleteTodoSchema>;\nexport type UploadImageInput = z.infer<typeof uploadImageSchema>;\n\n// Offline-specific types\nexport type TodoStatus = 'synced' | 'pending' | 'syncing' | 'error';\n\nexport const offlineTodoSchema = todoSchema.extend({\n  status: z.enum(['synced', 'pending', 'syncing', 'error']),\n  localId: z.string(),\n  serverId: z.number().nullable(),\n  createdAt: z.number(),\n  error: z.string().optional(),\n});\n\nexport type OfflineTodo = z.infer<typeof offlineTodoSchema>;\n\nexport type QueuedActionType = 'create' | 'update' | 'delete';\n\nexport const queuedActionSchema = z.object({\n  id: z.string(),\n  type: z.enum(['create', 'update', 'delete']),\n  todo: offlineTodoSchema,\n  timestamp: z.number(),\n  retryCount: z.number().default(0),\n});\n\nexport type QueuedAction = z.infer<typeof queuedActionSchema>;","import type { Todo, OfflineTodo } from './types';\n\n/**\n * Validates file size (default 5MB limit)\n */\nexport const validateFileSize = (file: File, maxSizeMB: number = 5): boolean => {\n  const maxSize = maxSizeMB * 1024 * 1024; // Convert MB to bytes\n  return file.size <= maxSize;\n};\n\n/**\n * Validates file type for images\n */\nexport const validateImageType = (file: File): boolean => {\n  const allowedTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/gif', 'image/webp'];\n  return allowedTypes.includes(file.type);\n};\n\n/**\n * Converts file to base64 string\n */\nexport const fileToBase64 = (file: File): Promise<string> => {\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.readAsDataURL(file);\n    reader.onload = () => {\n      const result = reader.result as string;\n      // Remove the data URL prefix to get just the base64 data\n      const base64Data = result.split(',')[1];\n      resolve(base64Data);\n    };\n    reader.onerror = error => reject(error);\n  });\n};\n\n/**\n * Generates a unique local ID for offline todos\n */\nexport const generateLocalId = (): string => {\n  return `local_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n};\n\n/**\n * Converts a regular todo to an offline todo\n */\nexport const todoToOfflineTodo = (todo: Todo): OfflineTodo => {\n  return {\n    ...todo,\n    status: 'synced',\n    localId: generateLocalId(),\n    serverId: todo.id,\n    createdAt: Date.now(),\n  };\n};\n\n/**\n * Creates a new offline todo from input data\n */\nexport const createOfflineTodo = (text: string, imageUrl?: string): OfflineTodo => {\n  return {\n    id: -1, // Temporary ID for offline todos\n    text,\n    completed: false,\n    imageUrl: imageUrl || null,\n    status: 'pending',\n    localId: generateLocalId(),\n    serverId: null,\n    createdAt: Date.now(),\n  };\n};\n\n/**\n * Storage keys for localStorage\n */\nexport const STORAGE_KEYS = {\n  OFFLINE_TODOS: 'ecomantem_offline_todos',\n  SYNC_QUEUE: 'ecomantem_sync_queue',\n  LAST_SYNC: 'ecomantem_last_sync',\n} as const;\n\n/**\n * Default retry configuration for sync operations\n */\nexport const SYNC_CONFIG = {\n  MAX_RETRIES: 3,\n  RETRY_DELAY: 1000, // 1 second\n  SYNC_INTERVAL: 30000, // 30 seconds\n} as const;","import type { OfflineTodo, QueuedAction } from './types';\nimport { STORAGE_KEYS } from './utils';\n\n/**\n * Local storage utilities for offline todos\n */\nexport class TodoStorage {\n  /**\n   * Get offline todos from localStorage\n   */\n  static getOfflineTodos(): OfflineTodo[] {\n    try {\n      const stored = localStorage.getItem(STORAGE_KEYS.OFFLINE_TODOS);\n      return stored ? JSON.parse(stored) : [];\n    } catch (error) {\n      console.error('Failed to get offline todos:', error);\n      return [];\n    }\n  }\n\n  /**\n   * Save offline todos to localStorage\n   */\n  static setOfflineTodos(todos: OfflineTodo[]): void {\n    try {\n      localStorage.setItem(STORAGE_KEYS.OFFLINE_TODOS, JSON.stringify(todos));\n    } catch (error) {\n      console.error('Failed to save offline todos:', error);\n    }\n  }\n\n  /**\n   * Get sync queue from localStorage\n   */\n  static getSyncQueue(): QueuedAction[] {\n    try {\n      const stored = localStorage.getItem(STORAGE_KEYS.SYNC_QUEUE);\n      return stored ? JSON.parse(stored) : [];\n    } catch (error) {\n      console.error('Failed to get sync queue:', error);\n      return [];\n    }\n  }\n\n  /**\n   * Save sync queue to localStorage\n   */\n  static setSyncQueue(queue: QueuedAction[]): void {\n    try {\n      localStorage.setItem(STORAGE_KEYS.SYNC_QUEUE, JSON.stringify(queue));\n    } catch (error) {\n      console.error('Failed to save sync queue:', error);\n    }\n  }\n\n  /**\n   * Get last sync timestamp\n   */\n  static getLastSync(): number {\n    try {\n      const stored = localStorage.getItem(STORAGE_KEYS.LAST_SYNC);\n      return stored ? parseInt(stored, 10) : 0;\n    } catch (error) {\n      console.error('Failed to get last sync time:', error);\n      return 0;\n    }\n  }\n\n  /**\n   * Set last sync timestamp\n   */\n  static setLastSync(timestamp: number): void {\n    try {\n      localStorage.setItem(STORAGE_KEYS.LAST_SYNC, timestamp.toString());\n    } catch (error) {\n      console.error('Failed to save last sync time:', error);\n    }\n  }\n\n  /**\n   * Clear all todo-related data from localStorage\n   */\n  static clearAll(): void {\n    try {\n      localStorage.removeItem(STORAGE_KEYS.OFFLINE_TODOS);\n      localStorage.removeItem(STORAGE_KEYS.SYNC_QUEUE);\n      localStorage.removeItem(STORAGE_KEYS.LAST_SYNC);\n    } catch (error) {\n      console.error('Failed to clear storage:', error);\n    }\n  }\n\n  /**\n   * Add a todo to offline storage\n   */\n  static addTodo(todo: OfflineTodo): void {\n    const todos = this.getOfflineTodos();\n    todos.push(todo);\n    this.setOfflineTodos(todos);\n  }\n\n  /**\n   * Update a todo in offline storage\n   */\n  static updateTodo(localId: string, updates: Partial<OfflineTodo>): void {\n    const todos = this.getOfflineTodos();\n    const index = todos.findIndex(t => t.localId === localId);\n    if (index !== -1) {\n      todos[index] = { ...todos[index], ...updates };\n      this.setOfflineTodos(todos);\n    }\n  }\n\n  /**\n   * Remove a todo from offline storage\n   */\n  static removeTodo(localId: string): void {\n    const todos = this.getOfflineTodos();\n    const filtered = todos.filter(t => t.localId !== localId);\n    this.setOfflineTodos(filtered);\n  }\n\n  /**\n   * Add an action to the sync queue\n   */\n  static addToSyncQueue(action: QueuedAction): void {\n    const queue = this.getSyncQueue();\n    queue.push(action);\n    this.setSyncQueue(queue);\n  }\n\n  /**\n   * Remove an action from the sync queue\n   */\n  static removeFromSyncQueue(actionId: string): void {\n    const queue = this.getSyncQueue();\n    const filtered = queue.filter(action => action.id !== actionId);\n    this.setSyncQueue(filtered);\n  }\n\n  /**\n   * Update an action in the sync queue\n   */\n  static updateSyncQueueAction(actionId: string, updates: Partial<QueuedAction>): void {\n    const queue = this.getSyncQueue();\n    const index = queue.findIndex(action => action.id === actionId);\n    if (index !== -1) {\n      queue[index] = { ...queue[index], ...updates };\n      this.setSyncQueue(queue);\n    }\n  }\n}","import type { Todo, CreateTodoInput, UpdateTodoInput, DeleteTodoInput, UploadImageInput } from './types';\n\nexport interface TodosApiConfig {\n  baseUrl: string;\n  // Optional custom fetch function (useful for auth, etc.)\n  fetch?: typeof fetch;\n}\n\nexport class TodosApi {\n  private config: TodosApiConfig;\n\n  constructor(config: TodosApiConfig) {\n    this.config = {\n      fetch: fetch,\n      ...config,\n    };\n  }\n\n  private async fetchWithAuth(url: string, options: RequestInit = {}) {\n    const fetchFn = this.config.fetch || fetch;\n    return fetchFn(url, {\n      ...options,\n      credentials: 'include', // Include cookies for auth\n      headers: {\n        'Content-Type': 'application/json',\n        ...options.headers,\n      },\n    });\n  }\n\n  private async handleResponse<T>(response: Response): Promise<T> {\n    if (!response.ok) {\n      const errorData = await response.json().catch(() => ({ error: 'Unknown error' }));\n      throw new Error(errorData.error || `HTTP ${response.status}: ${response.statusText}`);\n    }\n    return response.json();\n  }\n\n  /**\n   * Get all todos (without images)\n   */\n  async getAll(): Promise<Todo[]> {\n    const response = await this.fetchWithAuth(`${this.config.baseUrl}/rpc`, {\n      method: 'POST',\n      body: JSON.stringify({\n        path: ['todo', 'getAll'],\n        input: null,\n      }),\n    });\n    \n    const result = await this.handleResponse<{ result: Todo[] }>(response);\n    return result.result;\n  }\n\n  /**\n   * Get all todos with fresh image URLs\n   */\n  async getAllWithImages(): Promise<Todo[]> {\n    const response = await this.fetchWithAuth(`${this.config.baseUrl}/rpc`, {\n      method: 'POST',\n      body: JSON.stringify({\n        path: ['todo', 'getAllWithImages'],\n        input: null,\n      }),\n    });\n    \n    const result = await this.handleResponse<{ result: Todo[] }>(response);\n    return result.result;\n  }\n\n  /**\n   * Create a new todo\n   */\n  async create(input: CreateTodoInput): Promise<Todo> {\n    const response = await this.fetchWithAuth(`${this.config.baseUrl}/rpc`, {\n      method: 'POST',\n      body: JSON.stringify({\n        path: ['todo', 'create'],\n        input,\n      }),\n    });\n    \n    const result = await this.handleResponse<{ result: Todo }>(response);\n    return result.result;\n  }\n\n  /**\n   * Create a todo with image using multipart form\n   */\n  async createWithImage(text: string, imageFile: File): Promise<Todo> {\n    const formData = new FormData();\n    formData.append('text', text);\n    formData.append('image', imageFile);\n\n    const fetchFn = this.config.fetch || fetch;\n    const response = await fetchFn(`${this.config.baseUrl}/todos/create-with-image`, {\n      method: 'POST',\n      body: formData,\n      credentials: 'include', // Include cookies for auth\n      // Don't set Content-Type for FormData - browser will set it with boundary\n    });\n\n    return this.handleResponse<Todo>(response);\n  }\n\n  /**\n   * Upload image for existing todo\n   */\n  async uploadImage(input: UploadImageInput): Promise<{ imageUrl: string }> {\n    const response = await this.fetchWithAuth(`${this.config.baseUrl}/rpc`, {\n      method: 'POST',\n      body: JSON.stringify({\n        path: ['todo', 'uploadImage'],\n        input,\n      }),\n    });\n    \n    const result = await this.handleResponse<{ result: { imageUrl: string } }>(response);\n    return result.result;\n  }\n\n  /**\n   * Toggle todo completion status\n   */\n  async toggle(input: UpdateTodoInput): Promise<void> {\n    const response = await this.fetchWithAuth(`${this.config.baseUrl}/rpc`, {\n      method: 'POST',\n      body: JSON.stringify({\n        path: ['todo', 'toggle'],\n        input,\n      }),\n    });\n    \n    await this.handleResponse(response);\n  }\n\n  /**\n   * Delete a todo\n   */\n  async delete(input: DeleteTodoInput): Promise<void> {\n    const response = await this.fetchWithAuth(`${this.config.baseUrl}/rpc`, {\n      method: 'POST',\n      body: JSON.stringify({\n        path: ['todo', 'delete'],\n        input,\n      }),\n    });\n    \n    await this.handleResponse(response);\n  }\n\n  /**\n   * Test R2 connection (debug endpoint)\n   */\n  async testR2(): Promise<{ success: boolean; message: string; hasCredentials: any }> {\n    const response = await this.fetchWithAuth(`${this.config.baseUrl}/rpc`, {\n      method: 'POST',\n      body: JSON.stringify({\n        path: ['todo', 'testR2'],\n        input: null,\n      }),\n    });\n    \n    const result = await this.handleResponse<{ result: { success: boolean; message: string; hasCredentials: any } }>(response);\n    return result.result;\n  }\n}\n\n/**\n * Factory function to create a TodosApi instance\n */\nexport function createTodosApi(config: TodosApiConfig): TodosApi {\n  return new TodosApi(config);\n}\n\n/**\n * Default configuration for browser environments\n */\nexport function createBrowserTodosApi(baseUrl: string): TodosApi {\n  return new TodosApi({\n    baseUrl,\n    fetch: fetch,\n  });\n}","import { useMutation, useQuery, useQueryClient, type UseQueryOptions, type UseMutationOptions } from '@tanstack/react-query';\nimport type { TodosApi } from './api';\nimport type { Todo, CreateTodoInput, UpdateTodoInput, DeleteTodoInput, UploadImageInput } from './types';\n\nexport const TODOS_QUERY_KEYS = {\n  all: ['todos'] as const,\n  lists: () => [...TODOS_QUERY_KEYS.all, 'list'] as const,\n  list: (filters: Record<string, any>) => [...TODOS_QUERY_KEYS.lists(), { filters }] as const,\n  details: () => [...TODOS_QUERY_KEYS.all, 'detail'] as const,\n  detail: (id: number) => [...TODOS_QUERY_KEYS.details(), id] as const,\n} as const;\n\nexport interface UseTodosHooksConfig {\n  api: TodosApi;\n}\n\nexport function createTodosHooks(config: UseTodosHooksConfig) {\n  const { api } = config;\n\n  /**\n   * Hook to fetch all todos\n   */\n  function useTodos(options?: Omit<UseQueryOptions<Todo[], Error>, 'queryKey' | 'queryFn'>) {\n    return useQuery({\n      queryKey: TODOS_QUERY_KEYS.lists(),\n      queryFn: () => api.getAll(),\n      ...options,\n    });\n  }\n\n  /**\n   * Hook to fetch all todos with images\n   */\n  function useTodosWithImages(options?: Omit<UseQueryOptions<Todo[], Error>, 'queryKey' | 'queryFn'>) {\n    return useQuery({\n      queryKey: TODOS_QUERY_KEYS.list({ withImages: true }),\n      queryFn: () => api.getAllWithImages(),\n      ...options,\n    });\n  }\n\n  /**\n   * Hook to create a new todo\n   */\n  function useCreateTodo(options?: UseMutationOptions<Todo, Error, CreateTodoInput>) {\n    const queryClient = useQueryClient();\n    \n    return useMutation({\n      mutationFn: (input: CreateTodoInput) => api.create(input),\n      onSuccess: (data, variables, context) => {\n        // Invalidate and refetch todos\n        queryClient.invalidateQueries({ queryKey: TODOS_QUERY_KEYS.all });\n        options?.onSuccess?.(data, variables, context);\n      },\n      ...options,\n    });\n  }\n\n  /**\n   * Hook to create a todo with image\n   */\n  function useCreateTodoWithImage(options?: UseMutationOptions<Todo, Error, { text: string; image: File }>) {\n    const queryClient = useQueryClient();\n    \n    return useMutation({\n      mutationFn: ({ text, image }: { text: string; image: File }) => api.createWithImage(text, image),\n      onSuccess: (data, variables, context) => {\n        // Invalidate and refetch todos\n        queryClient.invalidateQueries({ queryKey: TODOS_QUERY_KEYS.all });\n        options?.onSuccess?.(data, variables, context);\n      },\n      ...options,\n    });\n  }\n\n  /**\n   * Hook to upload image for existing todo\n   */\n  function useUploadTodoImage(options?: UseMutationOptions<{ imageUrl: string }, Error, UploadImageInput>) {\n    const queryClient = useQueryClient();\n    \n    return useMutation({\n      mutationFn: (input: UploadImageInput) => api.uploadImage(input),\n      onSuccess: (data, variables, context) => {\n        // Invalidate and refetch todos\n        queryClient.invalidateQueries({ queryKey: TODOS_QUERY_KEYS.all });\n        options?.onSuccess?.(data, variables, context);\n      },\n      ...options,\n    });\n  }\n\n  /**\n   * Hook to toggle todo completion status\n   */\n  function useToggleTodo(options?: UseMutationOptions<void, Error, UpdateTodoInput>) {\n    const queryClient = useQueryClient();\n    \n    return useMutation({\n      mutationFn: (input: UpdateTodoInput) => api.toggle(input),\n      onSuccess: (data, variables, context) => {\n        // Invalidate and refetch todos\n        queryClient.invalidateQueries({ queryKey: TODOS_QUERY_KEYS.all });\n        options?.onSuccess?.(data, variables, context);\n      },\n      ...options,\n    });\n  }\n\n  /**\n   * Hook to delete a todo\n   */\n  function useDeleteTodo(options?: UseMutationOptions<void, Error, DeleteTodoInput>) {\n    const queryClient = useQueryClient();\n    \n    return useMutation({\n      mutationFn: (input: DeleteTodoInput) => api.delete(input),\n      onSuccess: (data, variables, context) => {\n        // Invalidate and refetch todos\n        queryClient.invalidateQueries({ queryKey: TODOS_QUERY_KEYS.all });\n        options?.onSuccess?.(data, variables, context);\n      },\n      ...options,\n    });\n  }\n\n  /**\n   * Hook to test R2 connection\n   */\n  function useTestR2(options?: Omit<UseQueryOptions<{ success: boolean; message: string; hasCredentials: any }, Error>, 'queryKey' | 'queryFn'>) {\n    return useQuery({\n      queryKey: ['todos', 'testR2'],\n      queryFn: () => api.testR2(),\n      enabled: false, // Don't run automatically\n      ...options,\n    });\n  }\n\n  return {\n    useTodos,\n    useTodosWithImages,\n    useCreateTodo,\n    useCreateTodoWithImage,\n    useUploadTodoImage,\n    useToggleTodo,\n    useDeleteTodo,\n    useTestR2,\n    queryKeys: TODOS_QUERY_KEYS,\n  };\n}\n\nexport type TodosHooks = ReturnType<typeof createTodosHooks>;"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACAA,iBAAkB;AAGX,IAAM,aAAa,aAAE,OAAO;AAAA,EACjC,IAAI,aAAE,OAAO;AAAA,EACb,MAAM,aAAE,OAAO;AAAA,EACf,WAAW,aAAE,QAAQ;AAAA,EACrB,UAAU,aAAE,OAAO,EAAE,SAAS;AAChC,CAAC;AAKM,IAAM,mBAAmB,aAAE,OAAO;AAAA,EACvC,MAAM,aAAE,OAAO,EAAE,IAAI,CAAC;AAAA,EACtB,UAAU,aAAE,OAAO,EAAE,SAAS;AAChC,CAAC;AAEM,IAAM,mBAAmB,aAAE,OAAO;AAAA,EACvC,IAAI,aAAE,OAAO;AAAA,EACb,WAAW,aAAE,QAAQ;AACvB,CAAC;AAEM,IAAM,mBAAmB,aAAE,OAAO;AAAA,EACvC,IAAI,aAAE,OAAO;AACf,CAAC;AAEM,IAAM,oBAAoB,aAAE,OAAO;AAAA,EACxC,QAAQ,aAAE,OAAO;AAAA,EACjB,UAAU,aAAE,OAAO;AAAA,EACnB,aAAa,aAAE,OAAO;AAAA,EACtB,UAAU,aAAE,OAAO;AAAA;AACrB,CAAC;AAUM,IAAM,oBAAoB,WAAW,OAAO;AAAA,EACjD,QAAQ,aAAE,KAAK,CAAC,UAAU,WAAW,WAAW,OAAO,CAAC;AAAA,EACxD,SAAS,aAAE,OAAO;AAAA,EAClB,UAAU,aAAE,OAAO,EAAE,SAAS;AAAA,EAC9B,WAAW,aAAE,OAAO;AAAA,EACpB,OAAO,aAAE,OAAO,EAAE,SAAS;AAC7B,CAAC;AAMM,IAAM,qBAAqB,aAAE,OAAO;AAAA,EACzC,IAAI,aAAE,OAAO;AAAA,EACb,MAAM,aAAE,KAAK,CAAC,UAAU,UAAU,QAAQ,CAAC;AAAA,EAC3C,MAAM;AAAA,EACN,WAAW,aAAE,OAAO;AAAA,EACpB,YAAY,aAAE,OAAO,EAAE,QAAQ,CAAC;AAClC,CAAC;;;ACvDM,IAAM,mBAAmB,CAAC,MAAY,YAAoB,MAAe;AAC9E,QAAM,UAAU,YAAY,OAAO;AACnC,SAAO,KAAK,QAAQ;AACtB;AAKO,IAAM,oBAAoB,CAAC,SAAwB;AACxD,QAAM,eAAe,CAAC,cAAc,aAAa,aAAa,aAAa,YAAY;AACvF,SAAO,aAAa,SAAS,KAAK,IAAI;AACxC;AAKO,IAAM,eAAe,CAAC,SAAgC;AAC3D,SAAO,IAAI,QAAQ,CAAC,SAAS,WAAW;AACtC,UAAM,SAAS,IAAI,WAAW;AAC9B,WAAO,cAAc,IAAI;AACzB,WAAO,SAAS,MAAM;AACpB,YAAM,SAAS,OAAO;AAEtB,YAAM,aAAa,OAAO,MAAM,GAAG,EAAE,CAAC;AACtC,cAAQ,UAAU;AAAA,IACpB;AACA,WAAO,UAAU,WAAS,OAAO,KAAK;AAAA,EACxC,CAAC;AACH;AAKO,IAAM,kBAAkB,MAAc;AAC3C,SAAO,SAAS,KAAK,IAAI,CAAC,IAAI,KAAK,OAAO,EAAE,SAAS,EAAE,EAAE,OAAO,GAAG,CAAC,CAAC;AACvE;AAKO,IAAM,oBAAoB,CAAC,SAA4B;AAC5D,SAAO;AAAA,IACL,GAAG;AAAA,IACH,QAAQ;AAAA,IACR,SAAS,gBAAgB;AAAA,IACzB,UAAU,KAAK;AAAA,IACf,WAAW,KAAK,IAAI;AAAA,EACtB;AACF;AAKO,IAAM,oBAAoB,CAAC,MAAc,aAAmC;AACjF,SAAO;AAAA,IACL,IAAI;AAAA;AAAA,IACJ;AAAA,IACA,WAAW;AAAA,IACX,UAAU,YAAY;AAAA,IACtB,QAAQ;AAAA,IACR,SAAS,gBAAgB;AAAA,IACzB,UAAU;AAAA,IACV,WAAW,KAAK,IAAI;AAAA,EACtB;AACF;AAKO,IAAM,eAAe;AAAA,EAC1B,eAAe;AAAA,EACf,YAAY;AAAA,EACZ,WAAW;AACb;AAKO,IAAM,cAAc;AAAA,EACzB,aAAa;AAAA,EACb,aAAa;AAAA;AAAA,EACb,eAAe;AAAA;AACjB;;;ACjFO,IAAM,cAAN,MAAkB;AAAA;AAAA;AAAA;AAAA,EAIvB,OAAO,kBAAiC;AACtC,QAAI;AACF,YAAM,SAAS,aAAa,QAAQ,aAAa,aAAa;AAC9D,aAAO,SAAS,KAAK,MAAM,MAAM,IAAI,CAAC;AAAA,IACxC,SAAS,OAAO;AACd,cAAQ,MAAM,gCAAgC,KAAK;AACnD,aAAO,CAAC;AAAA,IACV;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKA,OAAO,gBAAgB,OAA4B;AACjD,QAAI;AACF,mBAAa,QAAQ,aAAa,eAAe,KAAK,UAAU,KAAK,CAAC;AAAA,IACxE,SAAS,OAAO;AACd,cAAQ,MAAM,iCAAiC,KAAK;AAAA,IACtD;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKA,OAAO,eAA+B;AACpC,QAAI;AACF,YAAM,SAAS,aAAa,QAAQ,aAAa,UAAU;AAC3D,aAAO,SAAS,KAAK,MAAM,MAAM,IAAI,CAAC;AAAA,IACxC,SAAS,OAAO;AACd,cAAQ,MAAM,6BAA6B,KAAK;AAChD,aAAO,CAAC;AAAA,IACV;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKA,OAAO,aAAa,OAA6B;AAC/C,QAAI;AACF,mBAAa,QAAQ,aAAa,YAAY,KAAK,UAAU,KAAK,CAAC;AAAA,IACrE,SAAS,OAAO;AACd,cAAQ,MAAM,8BAA8B,KAAK;AAAA,IACnD;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKA,OAAO,cAAsB;AAC3B,QAAI;AACF,YAAM,SAAS,aAAa,QAAQ,aAAa,SAAS;AAC1D,aAAO,SAAS,SAAS,QAAQ,EAAE,IAAI;AAAA,IACzC,SAAS,OAAO;AACd,cAAQ,MAAM,iCAAiC,KAAK;AACpD,aAAO;AAAA,IACT;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKA,OAAO,YAAY,WAAyB;AAC1C,QAAI;AACF,mBAAa,QAAQ,aAAa,WAAW,UAAU,SAAS,CAAC;AAAA,IACnE,SAAS,OAAO;AACd,cAAQ,MAAM,kCAAkC,KAAK;AAAA,IACvD;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKA,OAAO,WAAiB;AACtB,QAAI;AACF,mBAAa,WAAW,aAAa,aAAa;AAClD,mBAAa,WAAW,aAAa,UAAU;AAC/C,mBAAa,WAAW,aAAa,SAAS;AAAA,IAChD,SAAS,OAAO;AACd,cAAQ,MAAM,4BAA4B,KAAK;AAAA,IACjD;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKA,OAAO,QAAQ,MAAyB;AACtC,UAAM,QAAQ,KAAK,gBAAgB;AACnC,UAAM,KAAK,IAAI;AACf,SAAK,gBAAgB,KAAK;AAAA,EAC5B;AAAA;AAAA;AAAA;AAAA,EAKA,OAAO,WAAW,SAAiB,SAAqC;AACtE,UAAM,QAAQ,KAAK,gBAAgB;AACnC,UAAM,QAAQ,MAAM,UAAU,OAAK,EAAE,YAAY,OAAO;AACxD,QAAI,UAAU,IAAI;AAChB,YAAM,KAAK,IAAI,EAAE,GAAG,MAAM,KAAK,GAAG,GAAG,QAAQ;AAC7C,WAAK,gBAAgB,KAAK;AAAA,IAC5B;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKA,OAAO,WAAW,SAAuB;AACvC,UAAM,QAAQ,KAAK,gBAAgB;AACnC,UAAM,WAAW,MAAM,OAAO,OAAK,EAAE,YAAY,OAAO;AACxD,SAAK,gBAAgB,QAAQ;AAAA,EAC/B;AAAA;AAAA;AAAA;AAAA,EAKA,OAAO,eAAe,QAA4B;AAChD,UAAM,QAAQ,KAAK,aAAa;AAChC,UAAM,KAAK,MAAM;AACjB,SAAK,aAAa,KAAK;AAAA,EACzB;AAAA;AAAA;AAAA;AAAA,EAKA,OAAO,oBAAoB,UAAwB;AACjD,UAAM,QAAQ,KAAK,aAAa;AAChC,UAAM,WAAW,MAAM,OAAO,YAAU,OAAO,OAAO,QAAQ;AAC9D,SAAK,aAAa,QAAQ;AAAA,EAC5B;AAAA;AAAA;AAAA;AAAA,EAKA,OAAO,sBAAsB,UAAkB,SAAsC;AACnF,UAAM,QAAQ,KAAK,aAAa;AAChC,UAAM,QAAQ,MAAM,UAAU,YAAU,OAAO,OAAO,QAAQ;AAC9D,QAAI,UAAU,IAAI;AAChB,YAAM,KAAK,IAAI,EAAE,GAAG,MAAM,KAAK,GAAG,GAAG,QAAQ;AAC7C,WAAK,aAAa,KAAK;AAAA,IACzB;AAAA,EACF;AACF;;;AC/IO,IAAM,WAAN,MAAe;AAAA,EAGpB,YAAY,QAAwB;AAClC,SAAK,SAAS;AAAA,MACZ;AAAA,MACA,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EAEA,MAAc,cAAc,KAAa,UAAuB,CAAC,GAAG;AAClE,UAAM,UAAU,KAAK,OAAO,SAAS;AACrC,WAAO,QAAQ,KAAK;AAAA,MAClB,GAAG;AAAA,MACH,aAAa;AAAA;AAAA,MACb,SAAS;AAAA,QACP,gBAAgB;AAAA,QAChB,GAAG,QAAQ;AAAA,MACb;AAAA,IACF,CAAC;AAAA,EACH;AAAA,EAEA,MAAc,eAAkB,UAAgC;AAC9D,QAAI,CAAC,SAAS,IAAI;AAChB,YAAM,YAAY,MAAM,SAAS,KAAK,EAAE,MAAM,OAAO,EAAE,OAAO,gBAAgB,EAAE;AAChF,YAAM,IAAI,MAAM,UAAU,SAAS,QAAQ,SAAS,MAAM,KAAK,SAAS,UAAU,EAAE;AAAA,IACtF;AACA,WAAO,SAAS,KAAK;AAAA,EACvB;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,SAA0B;AAC9B,UAAM,WAAW,MAAM,KAAK,cAAc,GAAG,KAAK,OAAO,OAAO,QAAQ;AAAA,MACtE,QAAQ;AAAA,MACR,MAAM,KAAK,UAAU;AAAA,QACnB,MAAM,CAAC,QAAQ,QAAQ;AAAA,QACvB,OAAO;AAAA,MACT,CAAC;AAAA,IACH,CAAC;AAED,UAAM,SAAS,MAAM,KAAK,eAAmC,QAAQ;AACrE,WAAO,OAAO;AAAA,EAChB;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,mBAAoC;AACxC,UAAM,WAAW,MAAM,KAAK,cAAc,GAAG,KAAK,OAAO,OAAO,QAAQ;AAAA,MACtE,QAAQ;AAAA,MACR,MAAM,KAAK,UAAU;AAAA,QACnB,MAAM,CAAC,QAAQ,kBAAkB;AAAA,QACjC,OAAO;AAAA,MACT,CAAC;AAAA,IACH,CAAC;AAED,UAAM,SAAS,MAAM,KAAK,eAAmC,QAAQ;AACrE,WAAO,OAAO;AAAA,EAChB;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,OAAO,OAAuC;AAClD,UAAM,WAAW,MAAM,KAAK,cAAc,GAAG,KAAK,OAAO,OAAO,QAAQ;AAAA,MACtE,QAAQ;AAAA,MACR,MAAM,KAAK,UAAU;AAAA,QACnB,MAAM,CAAC,QAAQ,QAAQ;AAAA,QACvB;AAAA,MACF,CAAC;AAAA,IACH,CAAC;AAED,UAAM,SAAS,MAAM,KAAK,eAAiC,QAAQ;AACnE,WAAO,OAAO;AAAA,EAChB;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,gBAAgB,MAAc,WAAgC;AAClE,UAAM,WAAW,IAAI,SAAS;AAC9B,aAAS,OAAO,QAAQ,IAAI;AAC5B,aAAS,OAAO,SAAS,SAAS;AAElC,UAAM,UAAU,KAAK,OAAO,SAAS;AACrC,UAAM,WAAW,MAAM,QAAQ,GAAG,KAAK,OAAO,OAAO,4BAA4B;AAAA,MAC/E,QAAQ;AAAA,MACR,MAAM;AAAA,MACN,aAAa;AAAA;AAAA;AAAA,IAEf,CAAC;AAED,WAAO,KAAK,eAAqB,QAAQ;AAAA,EAC3C;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,YAAY,OAAwD;AACxE,UAAM,WAAW,MAAM,KAAK,cAAc,GAAG,KAAK,OAAO,OAAO,QAAQ;AAAA,MACtE,QAAQ;AAAA,MACR,MAAM,KAAK,UAAU;AAAA,QACnB,MAAM,CAAC,QAAQ,aAAa;AAAA,QAC5B;AAAA,MACF,CAAC;AAAA,IACH,CAAC;AAED,UAAM,SAAS,MAAM,KAAK,eAAiD,QAAQ;AACnF,WAAO,OAAO;AAAA,EAChB;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,OAAO,OAAuC;AAClD,UAAM,WAAW,MAAM,KAAK,cAAc,GAAG,KAAK,OAAO,OAAO,QAAQ;AAAA,MACtE,QAAQ;AAAA,MACR,MAAM,KAAK,UAAU;AAAA,QACnB,MAAM,CAAC,QAAQ,QAAQ;AAAA,QACvB;AAAA,MACF,CAAC;AAAA,IACH,CAAC;AAED,UAAM,KAAK,eAAe,QAAQ;AAAA,EACpC;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,OAAO,OAAuC;AAClD,UAAM,WAAW,MAAM,KAAK,cAAc,GAAG,KAAK,OAAO,OAAO,QAAQ;AAAA,MACtE,QAAQ;AAAA,MACR,MAAM,KAAK,UAAU;AAAA,QACnB,MAAM,CAAC,QAAQ,QAAQ;AAAA,QACvB;AAAA,MACF,CAAC;AAAA,IACH,CAAC;AAED,UAAM,KAAK,eAAe,QAAQ;AAAA,EACpC;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,SAA8E;AAClF,UAAM,WAAW,MAAM,KAAK,cAAc,GAAG,KAAK,OAAO,OAAO,QAAQ;AAAA,MACtE,QAAQ;AAAA,MACR,MAAM,KAAK,UAAU;AAAA,QACnB,MAAM,CAAC,QAAQ,QAAQ;AAAA,QACvB,OAAO;AAAA,MACT,CAAC;AAAA,IACH,CAAC;AAED,UAAM,SAAS,MAAM,KAAK,eAAuF,QAAQ;AACzH,WAAO,OAAO;AAAA,EAChB;AACF;AAKO,SAAS,eAAe,QAAkC;AAC/D,SAAO,IAAI,SAAS,MAAM;AAC5B;AAKO,SAAS,sBAAsB,SAA2B;AAC/D,SAAO,IAAI,SAAS;AAAA,IAClB;AAAA,IACA;AAAA,EACF,CAAC;AACH;;;ACvLA,yBAAqG;AAI9F,IAAM,mBAAmB;AAAA,EAC9B,KAAK,CAAC,OAAO;AAAA,EACb,OAAO,MAAM,CAAC,GAAG,iBAAiB,KAAK,MAAM;AAAA,EAC7C,MAAM,CAAC,YAAiC,CAAC,GAAG,iBAAiB,MAAM,GAAG,EAAE,QAAQ,CAAC;AAAA,EACjF,SAAS,MAAM,CAAC,GAAG,iBAAiB,KAAK,QAAQ;AAAA,EACjD,QAAQ,CAAC,OAAe,CAAC,GAAG,iBAAiB,QAAQ,GAAG,EAAE;AAC5D;AAMO,SAAS,iBAAiB,QAA6B;AAC5D,QAAM,EAAE,IAAI,IAAI;AAKhB,WAAS,SAAS,SAAwE;AACxF,eAAO,6BAAS;AAAA,MACd,UAAU,iBAAiB,MAAM;AAAA,MACjC,SAAS,MAAM,IAAI,OAAO;AAAA,MAC1B,GAAG;AAAA,IACL,CAAC;AAAA,EACH;AAKA,WAAS,mBAAmB,SAAwE;AAClG,eAAO,6BAAS;AAAA,MACd,UAAU,iBAAiB,KAAK,EAAE,YAAY,KAAK,CAAC;AAAA,MACpD,SAAS,MAAM,IAAI,iBAAiB;AAAA,MACpC,GAAG;AAAA,IACL,CAAC;AAAA,EACH;AAKA,WAAS,cAAc,SAA4D;AACjF,UAAM,kBAAc,mCAAe;AAEnC,eAAO,gCAAY;AAAA,MACjB,YAAY,CAAC,UAA2B,IAAI,OAAO,KAAK;AAAA,MACxD,WAAW,CAAC,MAAM,WAAW,YAAY;AAEvC,oBAAY,kBAAkB,EAAE,UAAU,iBAAiB,IAAI,CAAC;AAChE,iBAAS,YAAY,MAAM,WAAW,OAAO;AAAA,MAC/C;AAAA,MACA,GAAG;AAAA,IACL,CAAC;AAAA,EACH;AAKA,WAAS,uBAAuB,SAA0E;AACxG,UAAM,kBAAc,mCAAe;AAEnC,eAAO,gCAAY;AAAA,MACjB,YAAY,CAAC,EAAE,MAAM,MAAM,MAAqC,IAAI,gBAAgB,MAAM,KAAK;AAAA,MAC/F,WAAW,CAAC,MAAM,WAAW,YAAY;AAEvC,oBAAY,kBAAkB,EAAE,UAAU,iBAAiB,IAAI,CAAC;AAChE,iBAAS,YAAY,MAAM,WAAW,OAAO;AAAA,MAC/C;AAAA,MACA,GAAG;AAAA,IACL,CAAC;AAAA,EACH;AAKA,WAAS,mBAAmB,SAA6E;AACvG,UAAM,kBAAc,mCAAe;AAEnC,eAAO,gCAAY;AAAA,MACjB,YAAY,CAAC,UAA4B,IAAI,YAAY,KAAK;AAAA,MAC9D,WAAW,CAAC,MAAM,WAAW,YAAY;AAEvC,oBAAY,kBAAkB,EAAE,UAAU,iBAAiB,IAAI,CAAC;AAChE,iBAAS,YAAY,MAAM,WAAW,OAAO;AAAA,MAC/C;AAAA,MACA,GAAG;AAAA,IACL,CAAC;AAAA,EACH;AAKA,WAAS,cAAc,SAA4D;AACjF,UAAM,kBAAc,mCAAe;AAEnC,eAAO,gCAAY;AAAA,MACjB,YAAY,CAAC,UAA2B,IAAI,OAAO,KAAK;AAAA,MACxD,WAAW,CAAC,MAAM,WAAW,YAAY;AAEvC,oBAAY,kBAAkB,EAAE,UAAU,iBAAiB,IAAI,CAAC;AAChE,iBAAS,YAAY,MAAM,WAAW,OAAO;AAAA,MAC/C;AAAA,MACA,GAAG;AAAA,IACL,CAAC;AAAA,EACH;AAKA,WAAS,cAAc,SAA4D;AACjF,UAAM,kBAAc,mCAAe;AAEnC,eAAO,gCAAY;AAAA,MACjB,YAAY,CAAC,UAA2B,IAAI,OAAO,KAAK;AAAA,MACxD,WAAW,CAAC,MAAM,WAAW,YAAY;AAEvC,oBAAY,kBAAkB,EAAE,UAAU,iBAAiB,IAAI,CAAC;AAChE,iBAAS,YAAY,MAAM,WAAW,OAAO;AAAA,MAC/C;AAAA,MACA,GAAG;AAAA,IACL,CAAC;AAAA,EACH;AAKA,WAAS,UAAU,SAA4H;AAC7I,eAAO,6BAAS;AAAA,MACd,UAAU,CAAC,SAAS,QAAQ;AAAA,MAC5B,SAAS,MAAM,IAAI,OAAO;AAAA,MAC1B,SAAS;AAAA;AAAA,MACT,GAAG;AAAA,IACL,CAAC;AAAA,EACH;AAEA,SAAO;AAAA,IACL;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA,WAAW;AAAA,EACb;AACF;","names":[]}